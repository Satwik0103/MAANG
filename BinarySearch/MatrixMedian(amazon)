int upperbound(vector<int>&B,int mid){
    int m=B.size();
    int ans=m;
    int low=0;int high=m-1;
    while(low<=high){
        int middle=(low+high)/2;
        if(B[middle]>mid){
            ans=middle;
            high=middle-1;
        }
        else{
            low=middle+1;
        }
    }
    return ans;
}
int countMed(vector<vector<int>>& A, int mid) {
    int cnt = 0;
    for (int i = 0; i < A.size(); i++) {
        // Use binary search to find the number of elements smaller than mid in each row.
        cnt += upperbound(A[i], mid);
    }
    return cnt;
}

int Solution::findMedian(vector<vector<int>>& A) {
    int n = A.size();
    int m = A[0].size();
    int low = INT_MAX;
    int high = INT_MIN;

    // Find the minimum and maximum values in the 2D vector.
    for (int i = 0; i < A.size(); i++) {
        low = min(low, A[i][0]);   //As rows sorted so finding min from 1 st col
        high = max(high, A[i][m - 1]); //Finding max from last collumn as row sorted matrix
    }

    int req = (n * m) / 2;     // median element will be middle element  so m*n/2  elements will be on left and right of median

    while (low <= high) {
        int mid = low + (high - low) / 2;
        int countMedian = countMed(A, mid); //counting total elements less than req

        if (countMedian <= req) {   
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return low;
}
