class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size();
        int n2=nums2.size();
        //swap as we want to do binary search on lower array
        if(n1>n2)
        return findMedianSortedArrays (nums2,nums1);
        int leftEleNo=(n1+n2+1)/2;
        int low=0;
        int high=n1;
        while(low<=high){
        int mid1=(low+high)/2;
        int mid2=leftEleNo-mid1;
        int l1=INT_MIN,l2=INT_MIN;
        int r1=INT_MAX,r2=INT_MAX;
        if(mid1-1>=0)l1=nums1[mid1-1];
        if(mid2-1>=0)l2=nums2[mid2-1];
        if(mid1<n1)r1=nums1[mid1];
        if(mid2<n2)r2=nums2[mid2];
        if(l1<=r2 && l2<=r1){
            if((n1+n2)%2==0){
                return double(max(l1,l2)+min(r1,r2))/2.0;
            }
            else
            return max(l1,l2);
        }
        else if (l1>r2){
            high=mid1-1;
        }
        else{
            low=mid1+1;
        }
        }
        return 0;

    }
};

Time complexity is O(log(min(m, n))):
SpaceComplexity-O(1)









// class Solution {
// public:
//     double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
//         vector<int>nums3;
//         int i=0;
//         int j=0;
//         while(i<nums1.size() && j<nums2.size()){
//             if(nums1[i]>=nums2[j]){
//                 nums3.push_back(nums2[j]);
//                 j++;
//             }
//             else{
//                  nums3.push_back(nums1[i]);
//                 i++;
//             }
//         }
//          while(i<nums1.size()){
//              nums3.push_back(nums1[i]);
//             i++;
//         }
//         while(j<nums2.size()){
//              nums3.push_back(nums2[j]);
//             j++;
//         }
//         int k=nums3.size();
//         if(k%2==0){
//             return (nums3[k/2]+nums3[k/2-1])/2.0;
//         }
//         else
//         return nums3[k/2];

        
//     }
// };

// time complexity of O(m + n) 
// space complexity of O(m + n), 
