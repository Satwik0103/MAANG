class Solution {
public:
    bool searchMatrix(vector<vector<int>>& A, int B) {
        int n=A.size();
        int m=A[0].size();
        int low=0;
        int high=m*n-1;
        int mid=(low+high)/2;
        while(low<=high){
            mid=(low+high)/2;
            int midEle=A[mid/m][mid%m];
            if(B==midEle)
                return true;
            else if(B>midEle){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return false;  
    }
};

 TimeComplexity- O(log(n x m)),
 spaceComplexity-O(1)
 

// class Solution {
// public:
//     bool searchMatrix(vector<vector<int>>& mat, int t) {
//         int m= mat.size();//3
//         int n= mat[0].size();//4
//         int flag=0;

//         for(int i=0;i<m;i++){ // outer loop for iterating all row
//             if(t <= mat[i][n-1]){ // for checking if element exist in a particular row or not
//                 for(int j=0;j<n;j++){ // if element assumed to be exist in a index, checking all value in that row
//                     if(mat[i][j]== t){ // if element found in that row return true and flag =1.
//                       return true;  
//                       flag=1;
//                     }
                    
//                 }
//                 if(flag==0)// if element not found where it should be means it doesnt exist, hence return false
//                 return false;
//             }

//         }
//         return false;

//     }
// };
// Time complexity -O(m*n)
// Space complexity-O(1)




//JAVA Code
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n=matrix.length;
        int m=matrix[0].length;
        int low=0;
        int high=m*n-1;
        while(low<=high){
            int mid=(low+high)/2;
            int midEle=matrix[mid/m][mid%m];
            if(midEle==target)
            return true;
            else if(midEle>target){
                high=mid-1;
            }
            else
            low=mid+1;
        }
        return false;
        
    }
}
