class Solution {
public:
//space Opt
int solveSpaceOpt(vector<int>&cost,int n){
    int prev2=cost[0];
    int prev1=cost[1];
    for(int i=2;i<n;i++){
        int curr=cost[i]+min(prev1,prev2);
        prev2=prev1;
        prev1=curr;
    }
    return min(prev1,prev2);
    }
//Tabulation
int solve2(vector<int>&cost,int n){
    vector<int>dp(n+1);
    dp[0]=cost[0];
    dp[1]=cost[1];
    for(int i=2;i<n;i++){
        dp[i]=cost[i]+min(dp[i-1],dp[i-2]);
    }
    return min(dp[n-1],dp[n-2]);
}

//Memoization
    int solve1(vector<int>&dp,vector<int>&cost,int n){
        if(n==0)
        return cost[0];

        if(n==1)
        return cost[1];

        if(dp[n]!=-1)
        return dp[n];

        dp[n]=min(solve1(dp,cost,n-1),solve1(dp,cost,n-2))+cost[n] ;
        return dp[n];
    }
    int minCostClimbingStairs(vector<int>& cost) {
         int n=cost.size();
        // vector<int>dp(n+1,-1);
        // int ans=min(solve1(dp,cost,n-1),solve1(dp,cost,n-2));
        // int ans=solve2(cost,n);
        // return ans;
        int ans=solveSpaceOpt(cost,n);
        return ans;
    }
};
