// class Solution {
// public:
//     bool lemonadeChange(vector<int>& bills) {
//         // queue<pair<int,int>>q=[{5,0},{10,0},{20,0}];
//         // pair<int,int>p
//         // for(int i=0;i<bills.size();i++){
//         //     p[bills[i]]++;
//         //     q.push(p);
//         // }
//         map<int,int>mp={{5,0},{10,0},{20,0}};
//         for(int i=0;i<bills.size();i++){
//             mp[bills[i]]+=1;
//             int remAmt=bills[i]-5;
//             if(remAmt==0)
//             continue;
             
//             else if(remAmt==5){
//             if(mp[5]==0){
//                 return false;
//             }
//             mp[5]-=1;
//             }
//             else if (remAmt==15){
//                 if((mp[5]>=1 && mp[10]>=1)){
//                     mp[5]-=1;
//                     mp[10]-=1;
//                 }
//                 else if(mp[5]>=3){
//                     mp[5]-=3;
//                 }
//                 else
//                 return false;
//             }     
//         }
//         return true;
        
//     }
// };
class Solution {
public:
    bool lemonadeChange(vector<int>& bills) {
        const int BILL_5 = 5;
        const int BILL_10 = 10;
        const int BILL_20 = 20;

        const int CHANGE_5 = 5;
        const int CHANGE_15 = 15;

        map<int, int> mp = {{BILL_5, 0}, {BILL_10, 0}, {BILL_20, 0}};

        for (int i = 0; i < bills.size(); i++) {
            mp[bills[i]] += 1;
            int remAmt = bills[i] - BILL_5;

            if (remAmt == 0)
                continue;
            else if (remAmt == CHANGE_5) {
                if (mp[BILL_5] == 0)
                    return false;
                mp[BILL_5] -= 1;
            } else if (remAmt == CHANGE_15) {
                if (mp[BILL_5] >= 1 && mp[BILL_10] >= 1) {
                    mp[BILL_5] -= 1;
                    mp[BILL_10] -= 1;
                } else if (mp[BILL_5] >= 3) {
                    mp[BILL_5] -= 3;
                } else
                    return false;
            }
        }
        return true;
    }
};
