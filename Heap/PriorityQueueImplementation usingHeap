int pop(vector<int> &heap) {
    if (heap.empty()) {
        return -1; // Heap is empty
    } else {
        int top = heap[0];
        // Put the first node with the last node
        int size = heap.size() - 1;
        heap[0] = heap[size];
        // Remove the last node
        heap.pop_back();
        int pos = 0;
        while (pos < size / 2) {  // Use size / 2 instead of size
            int leftC = 2 * pos + 1;
            int rightC = 2 * pos + 2;
            int largest = pos;

            if (leftC < size && heap[leftC] > heap[largest]) {
                largest = leftC;
            }

            if (rightC < size && heap[rightC] > heap[largest]) {
                largest = rightC;
            }

            if (largest != pos) {
                swap(heap[pos], heap[largest]);
                pos = largest;
            } else {
                break;
            }
        }
        return top;
    }
}


// Code Snippet of the push function: 
//
//     void push(vector<int> &heap, int x)
//     {
//           heap.push_back(x);
//
//            // Posistion of the current inserted element.
//            int pos=heap.size()-1;
//
//            // Shifting the element up until it reaches the top most node if it is larger than its parent.
//            while(pos>0)
//            {
//                int parent = (pos-1)/2;
//                if(heap[pos] > heap[parent])
//                {
//                    swap(heap[parent],heap[pos]);
//                    pos=parent;
//               }
//              else
//              {
//                  // As parent is larger the element now is in its correct position. 
//                  break;
//              }
//          }
//      }
