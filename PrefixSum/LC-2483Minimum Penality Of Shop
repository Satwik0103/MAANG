//Calculate prefix Sum of all yes
//Calculate prefix sum of all n 
//calculate totalSum of all y 
//At any point minAns=totalSumY-sumY[x]+sumN[x]
//Return minAns
class Solution {
public:
    int bestClosingTime(string customers) {
        vector<int>ans(customers.size()+1,0);
        vector<int>ansN(customers.size()+1,0);
        int t=1;
        int total=0;
        ans[0]=0;
        for(auto c:customers){
            if(c=='Y'){
                total+=1;
                ans[t]=1+ans[t-1];
                ansN[t]=ansN[t-1];
            }
            else{
                ans[t]=ans[t-1];
                ansN[t]=1+ansN[t-1];
            }
            t++;
        }
        int minAns=INT_MAX;
        int minVal=0;
        for(int i=0;i<ans.size();i++){
            cout<<i<<ans[i];
            if(minAns>total-ans[i]+ansN[i]){
                minAns=total-ans[i]+ansN[i];
                minVal=i;
            }
        }
        return minVal;
        
    }
};
