// class Solution {
// public:
//     bool checkVowel(char vow){
//         if(vow=='a'||vow=='e'||vow=='i'||vow=='o'||vow=='u'){
//             return true;
//         }
//         return false;
//     }
//     vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
//         vector<int>vec(words.size()+1,0);
//         vector<int>finalAns;
//         for(int i=0;i<words.size();i++){
//             int n=words[i].length()-1;
//             if(checkVowel(words[i][0]) && checkVowel(words[i][n])){
//                 cout<<words[i];
//                 if(i!=0){
//                     vec[i]=1+vec[i-1];
//                     }
//                 else vec[i]=1;
//             }
//             else{
//               if(i!=0){vec[i]=vec[i-1];}
//             }
//             cout<<i<<vec[i]<<endl;
//         }
//         for(int j=0;j<queries.size();j++){
//             int lowerRange=queries[j][0];
//             int upperRange=queries[j][1];
//             int res=0;
//             if(lowerRange!=0){
//                 res=vec[upperRange]-vec[lowerRange-1];}
//             else{
//                  res=vec[upperRange];}
//             finalAns.push_back(res);
//         }
//         return finalAns;

//     }
// // };
// class Solution {
// public:
//     bool checkVowel(char vow) {
//         return vow == 'a' || vow == 'e' || vow == 'i' || vow == 'o' || vow == 'u';
//     }

//     vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
//         vector<int> vec(words.size() + 1, 0);
//         vector<int> finalAns;

//         for (int i = 0; i < words.size(); ++i) {
//             int n = words[i].length() - 1;
//             if (checkVowel(words[i][0]) && checkVowel(words[i][n])) {
//                 cout << words[i];
//                 vec[i] = (i != 0) ? 1 + vec[i - 1] : 1;
//             } else {
//                 vec[i] = (i != 0) ? vec[i - 1] : 0;
//             }
//             cout << i << vec[i] << endl;
//         }

//         for (int j = 0; j < queries.size(); ++j) {
//             int lowerRange = queries[j][0];
//             int upperRange = queries[j][1];
//             int res = (lowerRange != 0) ? vec[upperRange] - vec[lowerRange - 1] : vec[upperRange];
//             finalAns.push_back(res);
//         }

//         return finalAns;
//     }
// };
class Solution {
public:
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        int n = words.size();
        vector<int> v(n+1,0);
        for(int i = 0; i < n; i++){
            if((words[i][0]=='a'||words[i][0]=='e'||words[i][0]=='i'||words[i][0]=='o'||words[i][0]=='u')&&(words[i][words[i].length()-1]=='a'||words[i][words[i].length()-1]=='e'||words[i][words[i].length()-1]=='i'||words[i][words[i].length()-1]=='o'||words[i][words[i].length()-1]=='u')){
                v[i+1] = 1;
            }
            v[i+1] += v[i];
        }
        vector<int> ans;
        for(auto &i: queries){
            ans.push_back(v[i[1]+1]-v[i[0]]);
        }
        return ans;
    }
};
