class Solution {
public:
    string getHint(string secret, string guess) {
        int n=secret.length();
        int bullCnt=0;
        int cowCnt=0;
        vector<int>secretCount(10,0);
        vector<int>guessCount(10,0);
        for(int i=0;i<n;i++){
            if(secret[i]==guess[i]){
                bullCnt++;
            }
            else{
                secretCount[secret[i]-'0']++;
                guessCount[guess[i]-'0']++;
            }
        }
        for(int k=0;k<10;k++){
            cowCnt+=min(secretCount[k],guessCount[k]);
        }
        string ans=to_string(bullCnt)+"A"+to_string(cowCnt)+"B";
        return ans;   
    }
};

// This approach has a time complexity of O(N) because we iterate through the strings only once, and the space complexity is O(1) because the arrays used have a fixed size of 10 (digits 0-9), which does not depend on the input size.





// class Solution {
// public:
//     string getHint(string secret, string guess) {
//         int n=secret.length();
//         int cntBull=0;
//         int cntCow=0;
//         for(int i=0;i<n;i++){
//             if(secret[i]==guess[i]){
//                 cntBull++;
//                 secret[i]=-1;
//                 guess[i]=-1;
//             }
//         }
//         for(int k=0;k<n;k++){
           
//                if(secret.find(guess[k])!=-1 && guess[k]!=-1)  //to count no of cow
//             {
//                 cntCow++;
//                 secret[secret.find(guess[k])]=-1;
//             }
//         }
//         string ans=to_string(cntBull)+"A"+to_string(cntCow)+"B";
//         return ans;
//     }
// };
